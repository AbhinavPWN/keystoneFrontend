About/page.tsx:

import AboutUs from "../components/AboutUs"

type BoardMember = {
  id: number
  name: string
  position: string
  image: string
  bio?: string
}

type Investment = {
  id: number
  title: string
  description?: string
  url?: string
  logo: string  // non-optional string here
}

// API response types
type StrapiImageFormat = {
  url: string
}

type StrapiImage = {
  id: number
  url: string
  formats?: {
    small?: StrapiImageFormat
    medium?: StrapiImageFormat
    large?: StrapiImageFormat
    thumbnail?: StrapiImageFormat
  }
}

type StrapiBoardMember = {
  id: number
  Name: string
  Position: string
  Bio?: string | null
  Image: StrapiImage[]
}

type StrapiInvestment = {
  id: number
  title: string
  description?: string | null
  url?: string | null
  logo?: StrapiImage[]
}

type StrapiResponse<T> = {
  data: T[]
}

const STRAPI_BASE_URL =
  process.env.NEXT_PUBLIC_STRAPI_BASE_URL || "http://localhost:8080"

export default async function AboutPage() {
  let boardMembers: BoardMember[] = []
  let investments: Investment[] = []

  try {
    const [boardRes, investmentsRes] = await Promise.all([
      fetch(`${process.env.STRAPI_API}/board-members?populate=*`, {
        cache: "no-store",
        headers: {
          Authorization: `Bearer ${process.env.STRAPI_TOKEN}`,
        },
      }),
      fetch(`${process.env.STRAPI_API}/investments?populate=*`, {
        cache: "no-store",
        headers: {
          Authorization: `Bearer ${process.env.STRAPI_TOKEN}`,
        },
      }),
    ])

    if (!boardRes.ok || !investmentsRes.ok) throw new Error("API error")

    const boardData: StrapiResponse<StrapiBoardMember> = await boardRes.json()
    const investmentsData: StrapiResponse<StrapiInvestment> = await investmentsRes.json()

    boardMembers = boardData.data.map((member) => {
      const img = member.Image?.[0]
      return {
        id: member.id,
        name: member.Name,
        position: member.Position,
        bio: member.Bio ?? undefined,
        image:
          img?.formats?.small?.url ||
          img?.url ||
          "/default-avatar.png",
      }
    })

    investments = investmentsData.data.map((inv) => {
      const logoImg = inv.logo?.[0]
      const logoUrl = logoImg?.formats?.small?.url || logoImg?.url || ""

      return {
        id: inv.id,
        title: inv.title,
        description: inv.description ?? undefined,
        url: inv.url ?? undefined,
        logo: logoUrl ? `${STRAPI_BASE_URL}${logoUrl}` : "", // always string
      }
    })
  } catch (err) {
    console.error(err)
  }

  return <AboutUs boardMembers={boardMembers} investments={investments} />
}


Componenets/Aboutus.tsx :

'use client'

import Image from "next/image"
import Link from "next/link"

type BoardMember = {
  id: number
  name: string
  position: string
  image: string
  bio?: string
}

type Investment = {
  id: number
  title: string
  description?: string
  url?: string
  logo: string
}

const STRAPI_BASE_URL =
  process.env.NEXT_PUBLIC_STRAPI_BASE_URL || "http://localhost:8080"

export default function AboutUs({
  boardMembers = [],
  investments = [],
}: {
  boardMembers?: BoardMember[]
  investments?: Investment[]
}) {
  return (
    <main className="bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-50">
      {/* Hero */}
      <section className="relative bg-[#0B1E36] dark:bg-gray-800 text-white py-20 text-center">
        <h1 className="text-4xl md:text-5xl font-bold font-playfair">
          About Keystone
        </h1>
        <p className="mt-4 text-lg max-w-2xl mx-auto">
          Building sustainable growth for our investors and stakeholders with
          trust, vision, and expertise.
        </p>
      </section>

      {/* Company Story */}
      <section className="py-16 bg-gray-50 dark:bg-gray-900">
        <div className="max-w-screen-xl mx-auto px-4 grid md:grid-cols-2 gap-8 items-center">
          <div className="space-y-4 order-2 md:order-1">
            <h2 className="text-3xl font-bold font-playfair">Who We Are</h2>
            <p className="leading-relaxed text-justify">
              <strong>Keystone Multipurpose Company Pvt. Ltd.</strong> is a
              trusted Nepali firm helping shareholders and investors grow their
              wealth by strategically investing in the stock market — both
              through short-term trading and long-term holdings.
            </p>
            <p className="leading-relaxed text-justify">
              With a commitment to transparency and sustainable growth, Keystone
              also manages two Mahindra Scorpio vehicles under our travel &
              booking subsidiary,{" "}
              <strong>Key-Stone Travels & Tours Pvt. Ltd.</strong>, providing
              additional value to our stakeholders.
            </p>
          </div>
          <div className="order-1 md:order-2">
            <Image
              src="/about-stock.webp"
              alt="Stock market illustration"
              width={600}
              height={400}
              className="rounded-lg shadow-lg w-full h-auto"
              priority
            />
          </div>
        </div>
      </section>

      {/* Values */}
      <section className="py-16 bg-white dark:bg-gray-800">
        <div className="max-w-screen-xl mx-auto px-4 text-center">
          <h2 className="text-3xl font-bold font-playfair mb-8">
            Our Commitment
          </h2>
          <div className="grid md:grid-cols-3 gap-8">
            <div className="p-6 bg-gray-50 dark:bg-gray-900 rounded shadow hover:shadow-md transition">
              <h3 className="font-semibold text-xl mb-2">Sustainable Growth</h3>
              <p>
                We aim for long-term, steady returns for our investors while
                minimizing risk and ensuring transparency.
              </p>
            </div>
            <div className="p-6 bg-gray-50 dark:bg-gray-900 rounded shadow hover:shadow-md transition">
              <h3 className="font-semibold text-xl mb-2">Transparency</h3>
              <p>
                Open communication and clear reporting to maintain the trust of
                our shareholders and partners.
              </p>
            </div>
            <div className="p-6 bg-gray-50 dark:bg-gray-900 rounded shadow hover:shadow-md transition">
              <h3 className="font-semibold text-xl mb-2">
                Stakeholder Value
              </h3>
              <p>
                Delivering tangible benefits not just to investors, but to the
                broader community through diverse ventures.
              </p>
            </div>
          </div>
        </div>
      </section>

      {/* Board Members */}
      {boardMembers.length > 0 && (
        <section className="py-16 bg-gray-50 dark:bg-gray-900">
          <div className="max-w-screen-xl mx-auto px-4 text-center">
            <h2 className="text-3xl font-bold font-playfair mb-8">
              Our Board
            </h2>
            <div className="grid gap-8 sm:grid-cols-2 md:grid-cols-3">
              {boardMembers.map((member) => (
                <div
                  key={member.id}
                  className="p-4 bg-white dark:bg-gray-800 rounded shadow hover:shadow-md transition text-center"
                >
                  <div className="relative w-32 h-32 mx-auto mb-4">
                    <Image
                      src={
                        member.image.startsWith("/")
                          ? `${STRAPI_BASE_URL}${member.image}`
                          : member.image
                      }
                      alt={member.name}
                      fill
                      className="rounded-full object-cover"
                    />
                  </div>
                  <h3 className="text-lg font-semibold">{member.name}</h3>
                  <p className="text-orange-500">{member.position}</p>
                  {member.bio && (
                    <p className="text-sm text-gray-600 dark:text-gray-400 mt-2">
                      {member.bio}
                    </p>
                  )}
                </div>
              ))}
            </div>
          </div>
        </section>
      )}

      {/* Investments */}
      {investments.length > 0 && (
        <section className="py-16 bg-gray-50 dark:bg-gray-900">
          <div className="max-w-screen-xl mx-auto px-4 text-center">
            <h2 className="text-3xl font-bold font-playfair mb-8">
              Our Investments
            </h2>
            <div className="grid gap-8 sm:grid-cols-2 md:grid-cols-3">
              {investments.map((inv) => (
                <div
                  key={inv.id}
                  className="p-4 bg-white dark:bg-gray-800 rounded shadow hover:shadow-md transition text-center"
                >
                  <div className="relative w-32 h-32 mx-auto mb-4">
                    <Image
                      src={
                        inv.logo.startsWith("/")
                          ? `${STRAPI_BASE_URL}${inv.logo}`
                          : inv.logo
                      }
                      alt={inv.title}
                      fill
                      className="object-contain rounded"
                    />
                  </div>
                  <h3 className="text-lg font-semibold">{inv.title}</h3>
                  {inv.description && (
                    <p className="text-sm mt-1">{inv.description}</p>
                  )}
                  {inv.url && (
                    <a
                      href={inv.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-orange-500 hover:underline mt-2 inline-block"
                    >
                      Visit Website →
                    </a>
                  )}
                </div>
              ))}
            </div>
          </div>
        </section>
      )}

      {/* Call to Action */}
      <section className="py-12 bg-[#0B1E36] dark:bg-gray-800 text-white text-center">
        <h2 className="text-2xl font-bold font-playfair">
          Ready to Partner With Keystone?
        </h2>
        <Link
          href="/reports"
          className="inline-block mt-4 px-6 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 transition"
        >
          View Our Reports →
        </Link>
      </section>
    </main>
  )
}


Gallery/Page.tsx:

import Gallery from "../components/Gallery"

export const revalidate = 0

type StrapiImageFormats = {
  small?: { url: string }
  medium?: { url: string }
  large?: { url: string }
  thumbnail?: { url: string }
}

type StrapiImage = {
  id: number
  url: string
  formats?: StrapiImageFormats
}

type StrapiGalleryItem = {
  id: number
  title: string
  Uploaded: string
  Image: StrapiImage
}

type PaginationMeta = {
  page: number
  pageSize: number
  pageCount: number
  total: number
}

type StrapiResponse = {
  data: StrapiGalleryItem[]
  meta: {
    pagination: PaginationMeta
  }
}

export default async function GalleryPage() {
  const res = await fetch(
    `${process.env.NEXT_PUBLIC_CMS_URL}/api/galleries?populate=*&pagination[page]=1&pagination[pageSize]=12`,
    {
      headers: {
        Authorization: `Bearer ${process.env.STRAPI_TOKEN}`,
      },
      cache: "no-store",
    }
  )

  if (!res.ok) throw new Error(`Failed to fetch gallery: ${res.status}`)

  const json: StrapiResponse = await res.json()

  const items = json.data.map((item) => ({
    id: item.id,
    title: item.title,
    uploaded: item.Uploaded,
    image:
      item.Image?.formats?.small?.url ||
      item.Image?.url ||
      "/default-image.png",
    fullImage: item.Image?.url || "/default-image.png",
  }))

  const pagination = json.meta.pagination

  return (
    <Gallery
      initialItems={items}
      initialPage={1}
      pagination={pagination}
    />
  )
}


Components/Gallery.tsx:

"use client"

import { useState } from "react"
import Image from "next/image"
import { HiChevronLeft, HiChevronRight } from "react-icons/hi"

type GalleryItem = {
  id: number
  documentId: string
  title: string
  uploaded: string
  image: string
  fullImage: string
}

type Pagination = {
  page: number
  pageSize: number
  pageCount: number
  total: number
}

export default function Gallery({
  initialItems,
  initialPage,
  pagination,
}: {
  initialItems: GalleryItem[]
  initialPage: number
  pagination: Pagination
}) {
  const [items, setItems] = useState<GalleryItem[]>(initialItems)
  const [currentPage, setCurrentPage] = useState<number>(initialPage)
  const [meta, setMeta] = useState<Pagination>(pagination)
  const [loading, setLoading] = useState<boolean>(false)

  const fetchPage = async (page: number) => {
    setLoading(true)
    const res = await fetch(
      `${process.env.NEXT_PUBLIC_CMS_URL}/api/galleries?populate=*&pagination[page]=${page}&pagination[pageSize]=12`,
      {
        headers: {
          Authorization: `Bearer ${process.env.STRAPI_TOKEN}`,
        },
      }
    )

    if (!res.ok) {
      console.error(`Failed to fetch page ${page}: ${res.status}`)
      setLoading(false)
      return
    }

    const json: {
      data: {
        id: number
        documentId: string
        title: string
        Uploaded: string
        Image: {
          id: number
          documentId: string
          url: string
          formats?: {
            small?: { url: string }
          }
        }
      }[]
      meta: { pagination: Pagination }
    } = await res.json()

    const newItems: GalleryItem[] = json.data.map((item) => ({
      id: item.id,
      documentId: item.documentId,
      title: item.title,
      uploaded: item.Uploaded,
      image:
        item.Image?.formats?.small?.url ||
        item.Image?.url ||
        "/default-image.png",
      fullImage: item.Image?.url || "/default-image.png",
    }))

    setItems(newItems)
    setCurrentPage(page)
    setMeta(json.meta.pagination)
    setLoading(false)
  }

  return (
    <main className="max-w-7xl mx-auto px-4 py-12">
      <h1 className="text-3xl font-bold mb-8 text-center">Gallery</h1>

      {loading && <p className="text-center">Loading…</p>}

      <div className="grid gap-4 grid-cols-2 sm:grid-cols-3 md:grid-cols-4">
        {items.map((item) => (
          <a
            key={item.id}
            href={`${process.env.NEXT_PUBLIC_CMS_URL}${item.fullImage}`}
            target="_blank"
            rel="noopener noreferrer"
            className="relative block rounded shadow hover:shadow-lg overflow-hidden"
          >
            <Image
              src={`${process.env.NEXT_PUBLIC_CMS_URL}${item.image}`}
              alt={item.title}
              width={300}
              height={200}
              className="object-cover w-full h-full"
            />
            <div className="absolute bottom-0 left-0 right-0 bg-black/50 text-white text-xs p-1">
              {item.title} ({item.documentId})
            </div>
          </a>
        ))}
      </div>

      <div className="flex justify-center mt-8 gap-4">
        <button
          onClick={() => fetchPage(currentPage - 1)}
          disabled={currentPage <= 1 || loading}
          className="px-4 py-2 bg-gray-300 rounded disabled:opacity-50 hover:bg-gray-400 transition"
          aria-label="Previous page"
        >
          <HiChevronLeft className="w-6 h-6" />
        </button>
        <span className="px-2 py-2">
          Page {currentPage} of {meta.pageCount}
        </span>
        <button
          onClick={() => fetchPage(currentPage + 1)}
          disabled={currentPage >= meta.pageCount || loading}
          className="px-4 py-2 bg-gray-300 rounded disabled:opacity-50 hover:bg-gray-400 transition"
          aria-label="Next page"
        >
          <HiChevronRight className="w-6 h-6" />
        </button>
      </div>
    </main>
  )
}
